package com.samuelji.fishgame.security;

import java.io.IOException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

import org.springframework.lang.NonNull;
import org.springframework.web.filter.OncePerRequestFilter;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

public class APITimestampFilter extends OncePerRequestFilter {

    private static final String API_PASSWORD = "default_password";

    @Override
    protected void doFilterInternal(@NonNull HttpServletRequest request, @NonNull HttpServletResponse response,
            @NonNull FilterChain filterChain)
            throws IOException, ServletException {
        String path = request.getRequestURI();
        ;

        // Skip filtering for /user/generate-token
        if (path.equals("/user/generate-token")) {
            filterChain.doFilter(request, response);
            return;
        }

        // token is generated by frontend (=md5[timestamp+pass+timestamp])
        String token = request.getHeader("token");
        // so we need to pass in timestamp for reference
        String timestamp = request.getHeader("timestamp");

        if (token == null || timestamp == null) {
            response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
            response.getWriter().write("{\"code\": 400, \"msg\": \"Missing token or timestamp\", \"data\": {}}");
            return;
        }
        String correctToken = generateToken(API_PASSWORD, timestamp);

        long currentTime = System.currentTimeMillis() / 1000;
        long requestTime = Long.parseLong(timestamp);

        if (Math.abs(currentTime - requestTime) > 60 || !token.equals(correctToken)) {
            response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
            response.getWriter().write("{\"code\": 401, \"msg\": \"Token invalid\", \"data\": {}}");
            return;
        }
        filterChain.doFilter(request, response);
    }

    private String generateToken(String password, String timestamp) {
        try {
            String data = password + timestamp + password;
            MessageDigest md = MessageDigest.getInstance("MD5");
            byte[] digest = md.digest(data.getBytes());
            StringBuilder sb = new StringBuilder();
            for (byte b : digest) {
                sb.append(String.format("%02x", b));
            }
            return sb.toString();
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException("Error generating token", e);
        }
    }
}